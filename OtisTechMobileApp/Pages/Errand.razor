@using Newtonsoft.Json;
@using OtisTechMobileApp.Models.InputModels;
@using OtisTechMobileApp.Models.ViewModels.Errands;
@using AutoMapper;
@inject IApiService apiService;
@inject NavigationManager navManager;
@page "/Errand/{ErrandId}"
@page "/Errand/"

<h1>Errand</h1>

<MudTable T="ErrandView" Items="errand">
    <HeaderContent>
        <MudTh>Errand Number</MudTh>
        <MudTh>Elavator Id</MudTh>
        <MudTh>Is Resolved</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Errand Number">@context.ErrandNumber</MudTd>
        <MudTd DataLabel="Elevator Id">@context.Elevator.Id</MudTd>
        <MudTd DataLabel="Is Resolved">@context.IsResolved</MudTd>

    </RowTemplate>

</MudTable>

<MudTable T="ErrandUpdateView" Items="updatesList">
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Message</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Date">@context.DateOfUpdate</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Message">@context.Message</MudTd>

    </RowTemplate>
</MudTable>

<MudSwitch Label="Errand resolved" @bind-Checked="@isResolved" Color="Color.Primary" />

<h2>Add comment</h2>
<MudTextField @bind-Value="comment" Variant="Variant.Outlined"></MudTextField>



<MudButton OnClick="SaveErrand">Update Errand</MudButton>

<MudButton OnClick="GoBack">Go back to list</MudButton>


@code {
    public List<ErrandView> errand { get; set; } = new List<ErrandView>();

    public List<ErrandUpdateView> updatesList { get; set; } = new();

    public ErrandView errandOne { get; set; } = new ErrandView();

    public ErrandInputModel errandInput { get; set; }

    public ErrandUpdateInputModel errandUpdateInput { get; set; } = new();

    public bool isResolved { get; set; }


    [Parameter]
    public string? ErrandId { get; set; }

    public string? comment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var jsonObject = await apiService.GetAsync($"Errands/GetErrand", new Dictionary<string, string> { { "errandNumber", ErrandId! } });

        errandOne = JsonConvert.DeserializeObject<ErrandView>(jsonObject) ?? null!;

        //var config = new MapperConfiguration(cfg => cfg.CreateMap<ErrandView, ErrandInputModel>().ReverseMap());
        //var mapper = config.CreateMapper();
        //var mappedInput = mapper.Map<ErrandView>(errandInput);

        updatesList = errandOne.ErrandUpdates;

        errand.Add(errandOne);
    }

    public void GoBack() => navManager.NavigateTo($"/");

    public async Task SaveErrand()
    {

        errandUpdateInput.ErrandNumber = errandOne.ErrandNumber;
        errandUpdateInput.IsResolved = isResolved;
        errandUpdateInput.Message = comment;      

        var jsonUpdate = JsonConvert.SerializeObject(errandUpdateInput);

        await apiService.PostAsync("Errands/updateerrand", jsonUpdate);
    }

}
